[comment encoding = UTF-8 /]
[module solidityPsm('www.psmmmmmmmmmmmmmmm.com')]


[template public solidity(aClass : Class)]
[comment @main/]
[file (aClass.name.concat('.sol'), false, 'UTF-8')]
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.0 <0.8.0;
[for (co : Class | aClass.eClass()->filter(Class))]
[if (aClass.contract)]
contract [aClass.name/]
{
  [for (p : Property | aClass.ownedProperty)]
	[p.type/] [if (p.payable)]payable[/if] [p.visibility/] [p.name/] ;
  [/for]

  [for (o : Operation | aClass.OwnedOperation)] 
    [if (o.function)]function [elseif (o.constructor)]constructor[/if]
	 [o.name/] (
    [for (pr : Parameter | o.ownedParameter) separator(', ')?()]
    [pr.type/] [pr.name/]                      
    [/for])
    [o.visibility/] 
    [for (mod : Constraint | o.ConstraintedElement)] [mod.name/] [/for]
    [if (o.payable)]payable[/if]
    [if (o.IsQuery)]view[/if]
    returns( [o.type/]) {
	[for (b : Behavior | o.method)]
		
	[/for]
	}

  [/for]

  [for (en : Enumeration |aClass.eClass()->filter(Enumeration))]
	enum [aClass.name/]{
		[for (el : EnumerLiteral | en.ownedLiteral) separator(', ')]
			[aClass.name/]
		[/for]
	}
  [/for]
  
  [for (m : Constraint | aClass.eClass()->filter(Constraint))]
	modifier [m.name/](){
		[m.Constraint_of_ConstraintedElement/]
        
	}
  [/for]


  [for (cn : Class | aClass.eClass()->filter(Class))]
	struct [cn.name/]{
		[for (p : Property | cn.ownedProperty) ]
		[p.type/] [p.name/];
        [/for]
	}
  [/for]

  
  [for (cn : Class | aClass.eClass()->filter(Class))]
	struct[cn.name/]{
		[for (p : Property | cn.ownedProperty) ]
		[p.type/] [p.name/];
        [/for]
	}
  [/for]
  
}


[/if]
[/for]
[/file]
[/template]
