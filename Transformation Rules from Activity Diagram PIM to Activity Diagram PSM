module activi;
create OUT : psm from IN : pim;

rule TransformActivity {
    from
        s: pim!Activity
    to
        t: psm!Activity(
        edges <- s.edges,
		nodes <-s.nodes)
		}

rule TransformActivityEdge {
    from
        s: pim!ActivityEdge
    to
        t: psm!ActivityEdge(
        source <- s.source,
		target <-s.target,
		guard <- s.guard,
		name <-s.name
		)	
}
rule TransformInitialNode {
    from
        s: pim!InitialNode
    to
        t: psm!InitialNode (
        incoming <- s.incoming,
		outgoing <-s.outgoing
		
)}
rule TransformFinalNode {
    from
        s: pim!FinalNode
    to
        t: psm!FinalNode (
        incoming <- s.incoming,
		outgoing <-s.outgoing
		
)}

rule TransformFlowFinalNode {
    from
        s: pim!FlowFinalNode
    to
        t: psm!FlowFinalNode (
        incoming <- s.incoming,
		outgoing <-s.outgoing
		
)}

rule TransformMergeNode {
    from
        s: pim!MergeNode
    to
        t: psm!MergeNode (
        incoming <- s.incoming,
		outgoing <-s.outgoing
		
)}

rule TransformDecisionNode {
    from
        s: pim!DecisionNode
    to
        t: psm!DecisionNode (
        incoming <- s.incoming,
		outgoing <-s.outgoing
		
)}


rule TransformAction {
    from
        s: pim!Action
    to
        t: psm!Action(name<- s.name,
            incoming <- s.incoming,
		    outgoing <-s.outgoing 
			)
}
